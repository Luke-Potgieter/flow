"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8060],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=o,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2162:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_position:3},i="Create a derivation with flowctl",l={unversionedId:"guides/flowctl/create-derivation",id:"guides/flowctl/create-derivation",title:"Create a derivation with flowctl",description:"Once you're familiar with creating a basic Data Flow, you can take things a step further",source:"@site/docs/guides/flowctl/create-derivation.md",sourceDirName:"guides/flowctl",slug:"/guides/flowctl/create-derivation",permalink:"/guides/flowctl/create-derivation",draft:!1,editUrl:"https://github.com/estuary/flow/edit/master/site/docs/guides/flowctl/create-derivation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Edit a draft created in the web app",permalink:"/guides/flowctl/edit-draft-from-webapp"},next:{title:"Troubleshoot a task with flowctl",permalink:"/guides/flowctl/troubleshoot-task"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Pull your specification files locally",id:"pull-your-specification-files-locally",level:2},{value:"Add a derivation",id:"add-a-derivation",level:2},{value:"Transform with a TypeScript module",id:"transform-with-a-typescript-module",level:2},{value:"Publish the derivation",id:"publish-the-derivation",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-derivation-with-flowctl"},"Create a derivation with flowctl"),(0,o.kt)("p",null,"Once you're familiar with creating a basic ",(0,o.kt)("a",{parentName:"p",href:"/concepts/#essential-concepts"},"Data Flow"),", you can take things a step further\nand transform your data with ",(0,o.kt)("a",{parentName:"p",href:"/concepts/derivations"},"derivations"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"derivation")," is a kind of Flow collection that results from the transformation of one or more other collections.\nThis transformed stream of data keeps the order of the source data intact,\nand can then be ",(0,o.kt)("strong",{parentName:"p"},"materialized")," to an outside system or further transformed with another derivation.\nWhen you master derivations, you unlock the full flexibility and power of your Data Flows."),(0,o.kt)("admonition",{title:"Beta",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Derivation creation is currently a developer workflow that uses ",(0,o.kt)("a",{parentName:"p",href:"/concepts/flowctl"},"flowctl"),".\nSupport for derivations in the Flow web application will be added in the future.")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A Flow account and access to the web app.\nIf you don't have an account yet, ",(0,o.kt)("a",{parentName:"p",href:"https://dashboard.estuary.dev"},"go to the web app")," to register for a free trial.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"An existing Flow ",(0,o.kt)("strong",{parentName:"p"},"collection"),". Typically, you create this through a ",(0,o.kt)("strong",{parentName:"p"},"capture")," in the Flow web application.\nIf you need help, see the ",(0,o.kt)("a",{parentName:"p",href:"/guides/create-dataflow"},"guide to create a Data Flow"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"flowctl")," installed locally. For help, see the ",(0,o.kt)("a",{parentName:"p",href:"/concepts/flowctl#installation-and-setup"},"installation instructions"),"."))),(0,o.kt)("h2",{id:"pull-your-specification-files-locally"},"Pull your specification files locally"),(0,o.kt)("p",null,"To begin working in your local environment, you must authenticate Flow from the command line.\nThen, you'll need to add your source collection's specification files to a ",(0,o.kt)("strong",{parentName:"p"},"draft")," and bring the draft into your local environment for editing."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Authorize flowctl."),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the ",(0,o.kt)("a",{parentName:"p",href:"https://dashboard.estuary.dev/admin/api"},"CLI-API tab of the web app")," and copy your access token.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"flowctl auth token --token <paste-token-here>"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Begin by creating a fresh draft. This is where you'll add the specification files you need from the catalog."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl draft create\n")),(0,o.kt)("p",{parentName:"li"},"The output table shows the draft ID and creation time. It doesn't have any catalog entities in it yet.\nYou'll add the source collection's specification to the draft.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Identify the collection (or collections) in the catalog that contains the data you want to derive, and add it to your draft."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl catalog draft --name namespace/data-flow-name/my-collection\n")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're unsure of the name of the collection, check ",(0,o.kt)("strong",{parentName:"p"},"Collections")," page in the web application.\nYou can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"flowctl draft list")," locally\nto begin exploring the catalog items available to you."),(0,o.kt)("p",{parentName:"admonition"},"The name of your collection may not follow the structure of the examples provided;\nsimply copy the entire name as you see it, including all prefixes.")),(0,o.kt)("p",{parentName:"li"},"The output confirms that the entity name you specified has been added to your draft, and is of the type ",(0,o.kt)("inlineCode",{parentName:"p"},"collection"),"."),(0,o.kt)("p",{parentName:"li"},"Your draft is set up, but still exists only on the Estuary servers.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Pull the draft locally to edit the specification files."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl draft develop\n")),(0,o.kt)("p",{parentName:"li"},"The specification files are written to your working directory."))),(0,o.kt)("h2",{id:"add-a-derivation"},"Add a derivation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Locate the specification YAML file for the collection you want to transform."),(0,o.kt)("p",{parentName:"li"},"In your working directory, you'll see a top-level file called ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.yaml"),".\nWithin a subdirectory that shares the name of your Data Flow, you'll find a second ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.yaml")," \u2014 this contains the collection specification."),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"tree")," to visualize your current working directory. This is a helpful tool to understand the ",(0,o.kt)("a",{parentName:"p",href:"/concepts/flowctl#development-directories"},"files that underlie your local draft"),".\nFor example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},".\n\u251c\u2500\u2500 namespace\n\u2502\xa0\xa0 \u2514\u2500\u2500 data-flow-name\n\u2502\xa0\xa0     \u2514\u2500\u2500 flow.yaml\n\u251c\u2500\u2500 flow.yaml\n\u251c\u2500\u2500 flow_generated\n\u2502\xa0\xa0 \u251c\u2500\u2500 flow\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 main.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 routes.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 server.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 tsconfig-files.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 types\n\u2502\xa0\xa0     \u2514\u2500\u2500 namespace\n\u2502\xa0\xa0         \u2514\u2500\u2500 data-flow-name\n\u2502\xa0\xa0             \u2514\u2500\u2500 my-collection.d.ts\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the specification file in your preferred editor."),(0,o.kt)("p",{parentName:"li"},"It will look similar to the following. (This example uses the default collection from the Hello World test capture, available in the web app):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"collections:\n   #The Hello World capture outputs a collection called `greetings`.\n   namespace/data-flow-name/greetings:\n      schema:\n         properties:\n         count:\n            type: integer\n         message:\n            type: string\n         required:\n         - count\n         - message\n         type: object\n      key:\n         - /count\n")),(0,o.kt)("p",{parentName:"li"},"You'll add the derivation to the same file."),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You may also create the derivation specification in a separate file; the results will be the same.\nHowever, if using separate files, you must make sure that the file with the derivation imports the source collection's specification,\nand that the top-level ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.yaml")," in your working directory imports all specification files.\n",(0,o.kt)("a",{parentName:"p",href:"/concepts/import"},"Learn more about imports.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a new collection below the first one."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The collection must have a schema that reflects your desired transformation output.\nThey can be whatever you want, as long as they follow Flow's standard formatting.\nFor help, see the ",(0,o.kt)("a",{parentName:"li",href:"/concepts/schemas"},"schemas")," and ",(0,o.kt)("a",{parentName:"li",href:"/concepts/collections#keys"},"collection key")," documentation."),(0,o.kt)("li",{parentName:"ul"},"Add the ",(0,o.kt)("inlineCode",{parentName:"li"},"derivation")," stanza. The TypeScript module you name will be generated next, and you'll define the transformation's function there.")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"collections:\n   namespace/data-flow-name/greetings:\n     {...}\n   #The name for your new collection can be whatever you want,\n   #so long as you have permissions in the namespace.\n   #Typically, you'll want to simply copy the source prefix\n   #and add a unique collection name.\n   namespace/data-flow-name/dozen-greetings:\n      #In this example, our objective is to round the number of greetings to the nearest dozen.\n      #We keep the `count` and `message` properties from the source,\n      #and add a new field called `dozens`.\n      schema:\n         properties:\n            count:\n               type: integer\n            message:\n               type: string\n            dozens:\n               type: integer\n         required:\n         - dozens\n         - count\n         - message\n         type: object\n      #Since we're interested in estimating by the dozen, we make `dozens` our collection key.\n      key:\n         - /dozens\n      derivation:\n         transform:\n            #The transform name can be anything you'd like.\n            greetings-by-dozen:\n               #Paste the full name of the source collection.\n               source: {name: namespace/data-flow-name/greetings}\n               #This simple transform only requires a **publish lambda* function.\n               #More complex transforms also use **update lambdas**.\n               #See the Derivations documentation to learn more about lambdas.\n               publish: {lambda: typescript}\n         #The name you provide for the module will be generated next.\n         typescript: {module: divide-by-twelve.ts}\n")),(0,o.kt)("p",{parentName:"li"},"Save the file."))),(0,o.kt)("h2",{id:"transform-with-a-typescript-module"},"Transform with a TypeScript module"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Generate the TypeScript module from the newly updated specification file."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl typescript generate --source ./path-to/your-file/flow.yaml\n")),(0,o.kt)("p",{parentName:"li"},"The TypeScript file you named has been created and stubbed out.\nYou only need to add the function body.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the new TypeScript module. It will look similar to the following:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IDerivation, Document, Register, GreetingsByDozenSource } from 'flow/namespace/data-flow-name/dozen-greetings';\n\n// Implementation for derivation flow.yaml#/collections/namespace~1data-flow-name~1dozen-greetings/derivation.\nexport class Derivation implements IDerivation {\n   greetingsByDozenPublish(\n      _source: GreetingsByDozenSource,\n      _register: Register,\n      _previous: Register,\n   ): Document[] {\n      throw new Error(\"Not implemented\");\n   }\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Remove the underscore in front of ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," and fill out the function body as required for your required transformation.\nFor more advanced transforms, you may need to activate ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"previous")," by removing their underscores.\n",(0,o.kt)("a",{parentName:"p",href:"/concepts/derivations"},"Learn more about derivations and see examples.")),(0,o.kt)("p",{parentName:"li"},"   This simple example rounds the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," field to the nearest dozen."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IDerivation, Document, Register, GreetingsByDozenSource } from 'flow/namespace/data-flow-name/dozen-greetings';\n\n// Implementation for derivation namespace/data-flow-name/flow.yaml#/collections/namespace~1data-flow-name~1dozen-greetings/derivation.\nexport class Derivation implements IDerivation {\n   greetingsByDozenPublish(\n      source: GreetingsByDozenSource,\n      _register: Register,\n      _previous: Register,\n   ): Document[] {\n       let count = source.count;\n       let dozen = count / 12;\n       let dozenround = Math.floor(dozen)\n       let out = {\n       dozens: dozenround,\n       ...source\n     }\n     return [out]\n  }\n}\n")),(0,o.kt)("p",{parentName:"li"},"   Save the file.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Optional: add a test to the ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.yaml")," file containing your collections.\nThis helps you verify that your data is transformed correctly."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'collections:\n   {...}\ntests:\n   namespace/data-flow-name/divide-test:\n      - ingest:\n         collection: namespace/data-flow-name/greetings\n         documents:\n            - { count: 13, message: "Hello #13" }\n      - verify:\n         collection: namespace/data-flow-name/dozen-greetings\n         documents:\n            - { dozens: 1, count: 13, message: "Hello #13"}\n')),(0,o.kt)("p",{parentName:"li"},"   ",(0,o.kt)("a",{parentName:"p",href:"/concepts/tests"},"Learn about tests.")))),(0,o.kt)("h2",{id:"publish-the-derivation"},"Publish the derivation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Author")," your draft. This adds the changes you made locally to the draft on the Estuary servers:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl draft author --source flow.yaml\n")),(0,o.kt)("p",{parentName:"li"},"Note that the file source is the top level ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.yaml")," in your working directory, not the file you worked on.\nThis file ",(0,o.kt)("inlineCode",{parentName:"p"},"imports")," all others in the local draft, so your changes will be included.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run generic tests, as well as your custom tests, if you created any."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl draft test\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Publish")," the draft to the catalog."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"flowctl draft publish\n")))),(0,o.kt)("p",null,"The derivation you created is now live and ready for further use.\nYou can access it from the web application and ",(0,o.kt)("a",{parentName:"p",href:"/guides/create-dataflow#create-a-materialization"},"materialize it to a destination"),",\njust as you would any other Flow collection."))}d.isMDXComponent=!0}}]);