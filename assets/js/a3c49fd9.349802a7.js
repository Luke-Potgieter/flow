"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3365],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6708:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="Create a simple data flow",c={unversionedId:"guides/create-dataflow",id:"guides/create-dataflow",title:"Create a simple data flow",description:"Whether you're learning to use Flow or testing a new pipeline, much of your work will take place in a local or virtual environment. This guide outlines the basic steps to create and deploy a data flow using Flow's current GitOps workflow.",source:"@site/docs/guides/create-dataflow.md",sourceDirName:"guides",slug:"/guides/create-dataflow",permalink:"/guides/create-dataflow",editUrl:"https://github.com/estuary/flow/edit/master/site/docs/guides/create-dataflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tests",permalink:"/concepts/tests"},next:{title:"Configure connections with SSH tunneling",permalink:"/guides/connect-network"}},p=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Introduction",id:"introduction",children:[],level:2},{value:"Steps",id:"steps",children:[],level:2},{value:"What&#39;s next?",id:"whats-next",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-simple-data-flow"},"Create a simple data flow"),(0,r.kt)("p",null,"Whether you're learning to use Flow or testing a new pipeline, much of your work will take place in a local or virtual environment. This guide outlines the basic steps to create and deploy a data flow using Flow's current GitOps workflow."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Beta")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Flow's UI is coming in 2022. In the future, Estuary will continue to support and improve both GitOps and UI-based workflows."))),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"This guide assumes a basic understanding of Flow and its key concepts. At a minimum, begin by reading the ",(0,r.kt)("a",{parentName:"p",href:"/concepts/"},"high level concepts")," documentation."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The simplest Flow ",(0,r.kt)("strong",{parentName:"p"},"catalog")," comprises three types of entities that define your data flow: a data ",(0,r.kt)("strong",{parentName:"p"},"capture")," from an external source, one or more ",(0,r.kt)("strong",{parentName:"p"},"collections"),", which store that data in the Flow runtime, and a ",(0,r.kt)("strong",{parentName:"p"},"materialization"),", to push them to an external destination."),(0,r.kt)("p",null,"In the majority of cases, the capture and materialization each rely on a plug-in ",(0,r.kt)("strong",{parentName:"p"},"connector"),". Here, we'll walk through how to leverage various connectors, configure them in your ",(0,r.kt)("strong",{parentName:"p"},"catalog specification"),", and run the catalog in a temporary ",(0,r.kt)("strong",{parentName:"p"},"data plane"),"."),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set up a development environment. We recommend a VM-backed environment using GitHub Codespaces, if you have access. Otherwise, you can set up a local environment. Follow the ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/installation"},"setup requirements here"),"."),(0,r.kt)("p",{parentName:"li"},"Next, you'll create your catalog spec. Rather than starting from scratch, you'll use the guided ",(0,r.kt)("inlineCode",{parentName:"p"},"flowctl discover")," process to generate one that is pre-configured for the capture connector you're using."),(0,r.kt)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You may notice the template you cloned in step 1 comes with a catalog spec. It's an example, so you can disregard it unless you choose to run the ",(0,r.kt)("a",{parentName:"p",href:"../../getting-started/flow-tutorials/hello-flow"},"tutorial"),".")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"../../reference/connectors/capture-connectors"},"capture connectors list")," and find your data source system. Click on its ",(0,r.kt)("strong",{parentName:"p"},"configuration")," link, set up prerequisites as necessary, and follow the instructions to generate a catalog spec with ",(0,r.kt)("a",{parentName:"p",href:"/concepts/connectors#flowctl-discover"},(0,r.kt)("inlineCode",{parentName:"a"},"flowctl discover")),"."),(0,r.kt)("p",{parentName:"li"},"A generalized version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"discover")," workflow is as follows:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"In your terminal, run: ",(0,r.kt)("inlineCode",{parentName:"li"},"flowctl discover --image=ghcr.io/estuary/<connector-name>:dev")),(0,r.kt)("li",{parentName:"ol"},"In the generated file called ",(0,r.kt)("inlineCode",{parentName:"li"},"discover-source-<connector-name>-config.yaml"),", fill in the required values."),(0,r.kt)("li",{parentName:"ol"},"Re-run the command. A catalog spec called ",(0,r.kt)("inlineCode",{parentName:"li"},"discover-source-<connector-name>.flow.yaml")," is generated.")),(0,r.kt)("p",{parentName:"li"},"You now have a catalog spec that contains a capture and one or more collections."),(0,r.kt)("p",{parentName:"li"},"In a production workflow, your collections would be stored in a cloud storage bucket. In the development workflow, cloud storage isn't used, but you must supply a placeholder ",(0,r.kt)("strong",{parentName:"p"},"storage mapping"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Copy and paste the following section at the top of your catalog spec, where ",(0,r.kt)("inlineCode",{parentName:"p"},"tenant")," matches the tenant used for your collections:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'storageMappings:\n  tenant/:\n    stores:\n      - bucket: "my-bucket"\n        provider: "S3"\n')),(0,r.kt)("p",{parentName:"li"},"To complete your end-to-end dataflow, you'll now add a materialization. Like your capture, materializations are configured differently depending on the connector and endpoint system; however, they are configured manually.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Go to the ",(0,r.kt)("a",{parentName:"p",href:"../../reference/connectors/materialization-connectors"},"materialization connectors list"),". Find your destination system, open its ",(0,r.kt)("strong",{parentName:"p"},"configuration")," page, and follow the sample to configure your materialization.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Launch the system locally:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-console"},"flowctl temp-data-plane\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Leave that running and open a new shell window. There, deploy your catalog:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-console"},"flowctl deploy --source=your_file.flow.yaml --wait-and-cleanup\n")),(0,r.kt)("p",{parentName:"li"},"You'll now be able to see data flowing between your source and destination systems."),(0,r.kt)("p",{parentName:"li"},"When you're done, press Ctrl-C to exit and clean up."))),(0,r.kt)("h2",{id:"whats-next"},"What's next?"),(0,r.kt)("p",null,"With Flow, you can build a wide range of scalable real-time data integrations, with optional transformations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can add multiple captures and materializations to the same catalog spec. Check back regularly; we frequently add new connectors."),(0,r.kt)("li",{parentName:"ul"},"You can add ",(0,r.kt)("a",{parentName:"li",href:"/concepts/derivations"},"derivations"),"."),(0,r.kt)("li",{parentName:"ul"},"Current beta customers can work with the Estuary team to set up production-level pipelines.")))}d.isMDXComponent=!0}}]);