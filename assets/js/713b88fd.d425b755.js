"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2414],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(f,l(l({ref:t},c),{},{components:n})):o.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5493:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],i={sidebar_position:1,description:"Create your first end-to-end data flow."},s="Your first data flow",u={unversionedId:"getting-started/flow-tutorials/hello-flow",id:"getting-started/flow-tutorials/hello-flow",title:"Your first data flow",description:"Create your first end-to-end data flow.",source:"@site/docs/getting-started/flow-tutorials/hello-flow.md",sourceDirName:"getting-started/flow-tutorials",slug:"/getting-started/flow-tutorials/hello-flow",permalink:"/getting-started/flow-tutorials/hello-flow",editUrl:"https://github.com/estuary/flow/edit/master/site/docs/getting-started/flow-tutorials/hello-flow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Create your first end-to-end data flow."},sidebar:"tutorialSidebar",previous:{title:"Flow tutorials",permalink:"/getting-started/flow-tutorials/"},next:{title:"Concepts",permalink:"/concepts/"}},c=[{value:"Word count in a continuous PostgreSQL materialized view",id:"word-count-in-a-continuous-postgresql-materialized-view",children:[],level:2},{value:"Set up",id:"set-up",children:[],level:2},{value:"Verify tests",id:"verify-tests",children:[],level:2},{value:"Run it locally",id:"run-it-locally",children:[],level:2}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"your-first-data-flow"},"Your first data flow"),(0,r.kt)("p",null,"You can find a more succinct version of this tutorial in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/estuary/flow-template"},"Flow Template repository"),"."),(0,r.kt)("h2",{id:"word-count-in-a-continuous-postgresql-materialized-view"},"Word count in a continuous PostgreSQL materialized view"),(0,r.kt)("p",null,"PostgreSQL is a great open-source database that supports materialized views, but it doesn't offer ",(0,r.kt)("em",{parentName:"p"},"continuous")," materialized views. In this tutorial, you'll build one with Flow."),(0,r.kt)("p",null,"How many times have you managed text documents in PostgreSQL and thought to yourself:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'"Gee-whiz, self, I wish I had a table of word counts that was always up-to-date!"')),(0,r.kt)("p",null,"... basically never, right? Well, it's a simple way to get familiar with a powerful concept, so let's do it anyway!"),(0,r.kt)("p",null,"Our data flow will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Capture")," data from a ",(0,r.kt)("inlineCode",{parentName:"li"},"documents")," table in the PostgreSQL database."),(0,r.kt)("li",{parentName:"ul"},"Use a ",(0,r.kt)("strong",{parentName:"li"},"derivation")," to compute word and document frequency updates."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Materialize")," the results back into the table in a a ",(0,r.kt)("inlineCode",{parentName:"li"},"word_counts")," table.")),(0,r.kt)("p",null,"These three processes \u2014 captures, derivations, and materializations \u2014 comprise the possible ",(0,r.kt)("strong",{parentName:"p"},"tasks")," in any data flow. They're configured in YAML files known as a ",(0,r.kt)("strong",{parentName:"p"},"catalog specification"),". For this example, they've been configured for you. If you'd like, you can check out ",(0,r.kt)("inlineCode",{parentName:"p"},"flow.yaml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"word-counts.flow.yaml")," to get oriented."),(0,r.kt)("h2",{id:"set-up"},"Set up"),(0,r.kt)("p",null,"These instructions assume you've ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/installation"},"set up a development environment")," either using Codespaces or on your local machine. Go back and do that first, if necessaary."),(0,r.kt)("h2",{id:"verify-tests"},"Verify tests"),(0,r.kt)("p",null,"All cutting-edge word count projects should have tests.\nLet's make sure the words are, um, counted. Run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ flowctl test --source word-counts.flow.yaml\n")),(0,r.kt)("p",null,"Wait until you see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Running  1  tests...\n\u2714\ufe0f word-counts.flow.yaml :: acmeCo/tests/word-counts-from-documents\n\nRan 1 tests, 1 passed, 0 failed\n")),(0,r.kt)("p",null,"Your test performed as expected; now you can deploy the catalog."),(0,r.kt)("h2",{id:"run-it-locally"},"Run it locally"),(0,r.kt)("p",null,"Start a local, temporary Flow data plane:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ flowctl temp-data-plane\n")),(0,r.kt)("p",null,"A data plane is a long-lived, multi-tenant, scale-out component that\nusually runs in a data center.\nFortunately it also shrinks down to your laptop."),(0,r.kt)("p",null,"This returns a couple exported addresses. Copy these; you'll need them in a moment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"export BROKER_ADDRESS=http://localhost:8080\nexport CONSUMER_ADDRESS=http://localhost:9000\n")),(0,r.kt)("p",null,"Now, deploy the catalog to your data plane by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ export BROKER_ADDRESS=http://localhost:8080\n$ export CONSUMER_ADDRESS=http://localhost:9000\n$ flowctl deploy --wait-and-cleanup --source flow.yaml\n")),(0,r.kt)("p",null,"After a moment, you'll see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Deployment done. Waiting for Ctrl-C to clean up and exit.\n")),(0,r.kt)("p",null,"Flow is now watching the ",(0,r.kt)("inlineCode",{parentName:"p"},"documents")," table, and materializing to ",(0,r.kt)("inlineCode",{parentName:"p"},"word_counts"),".\nStart a new terminal window to begin working with the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'$ psql --host localhost\npsql (13.5 (Debian 13.5-0+deb11u1), server 13.2 (Debian 13.2-1.pgdg100+1))\nType "help" for help.\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"documents")," table is still empty, so you'll populate it with a few phrases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"flow=# insert into documents (body) values ('The cat in the hat.'), ('hat Cat CAT!');\nINSERT 0 2\n")),(0,r.kt)("p",null,"Now, you'll take a look at ",(0,r.kt)("inlineCode",{parentName:"p"},"word_counts")," to see the results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"flow=# select word, count, doc_count from word_counts;\n word | count | doc_count\n------+-------+-----------\n cat  |     3 |         2\n hat  |     2 |         2\n in   |     1 |         1\n the  |     2 |         1\n(4 rows)\n")),(0,r.kt)("p",null,"Say you made a typo in that second value. You can immediately update it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"flow=# update documents set body = 'cat Cat CAT!' where id = 2;\nUPDATE 1\nflow=# select word, count, doc_count from word_counts order by word;\n word | count | doc_count\n------+-------+-----------\n cat  |     4 |         2\n hat  |     1 |         1\n in   |     1 |         1\n the  |     2 |         1\n(4 rows)\n")),(0,r.kt)("p",null,"Now, let's clean up the table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"flow=# delete from documents ;\nDELETE 2\nflow=# select word, count, doc_count from word_counts order by word;\n word | count | doc_count\n------+-------+-----------\n cat  |     0 |         0\n hat  |     0 |         0\n in   |     0 |         0\n the  |     0 |         0\n(4 rows)\n")),(0,r.kt)("p",null,"The updates you push to ",(0,r.kt)("inlineCode",{parentName:"p"},"documents")," are materialized to ",(0,r.kt)("inlineCode",{parentName:"p"},"word_counts")," with millisecond latency. In effect, you've added a new, powerful capability to PostgreSQL that has a multitude\nof real-world and business applications (far beyond counting cats and hats)."),(0,r.kt)("p",null,"When you're done with your testing, exit the data flow by returning to your first console window and pressing ",(0,r.kt)("strong",{parentName:"p"},"Ctrl-C"),"."))}d.isMDXComponent=!0}}]);