-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Had to manually inject this, as the diff script didn't seem to pick it up
drop function if exists internal.notify_agent;
create function internal.notify_agent() returns trigger as $trigger$
declare
  payload text;
begin
  -- Build the payload
  payload := json_build_object('timestamp',CURRENT_TIMESTAMP,'table',TG_TABLE_NAME);

  -- Notify the channel
  perform pg_notify('agent_notifications', payload);

  return null;
END;
$trigger$ LANGUAGE plpgsql;

CREATE TRIGGER "Notify agent about changes to connector_tags"
    AFTER INSERT OR UPDATE
    ON public.connector_tags
    FOR EACH STATEMENT
    EXECUTE FUNCTION internal.notify_agent();

CREATE TRIGGER "Notify agent about changes to publication"
    AFTER INSERT OR UPDATE
    ON public.publications
    FOR EACH STATEMENT
    EXECUTE FUNCTION internal.notify_agent();

CREATE TRIGGER "Notify agent about changes to discover requests"
    AFTER INSERT OR UPDATE
    ON public.discovers
    FOR EACH STATEMENT
    EXECUTE FUNCTION internal.notify_agent();

CREATE TRIGGER "Notify agent of applied directive"
    AFTER INSERT OR UPDATE
    ON public.applied_directives
    FOR EACH STATEMENT
    EXECUTE FUNCTION internal.notify_agent();